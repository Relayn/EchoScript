"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
–≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤.
"""

import abc
import pathlib
from typing import Any, Dict, Type

from rich.console import Console

from app.core.models import OutputFormat

console = Console()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
_SUCCESS_SAVE_MESSAGE = "üíæ [green]–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:[/green]"


def _format_srt_time(seconds: float) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ SRT (–ß–ß:–ú–ú:–°–°,–º—Å)."""
    if seconds < 0:
        raise ValueError("–û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞")
    milliseconds = round(seconds * 1000.0)

    hours = int(milliseconds / 3_600_000)
    milliseconds -= hours * 3_600_000

    minutes = int(milliseconds / 60_000)
    milliseconds -= minutes * 60_000

    seconds = int(milliseconds / 1000)
    milliseconds -= seconds * 1000

    return f"{hours:02d}:{minutes:02d}:{seconds:02d},{milliseconds:03d}"


class ExportAdapter(abc.ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞."""

    @abc.abstractmethod
    def export(
        self,
        result_data: dict[str, Any],
        destination_path: pathlib.Path,
        silent: bool = True,
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å.

        Args:
            result_data: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç TranscriptionService.
                         –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∫–ª—é—á "text".
            destination_path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
            silent: –ï—Å–ª–∏ False, –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
        """
        raise NotImplementedError


class TxtExportAdapter(ExportAdapter):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)."""

    def export(
        self,
        result_data: dict[str, Any],
        destination_path: pathlib.Path,
        silent: bool = True,
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt."""
        try:
            destination_path.write_text(result_data["text"], encoding="utf-8")
            if not silent:
                console.print(_SUCCESS_SAVE_MESSAGE)
                console.print(f"[bold cyan]{destination_path}[/bold cyan]")
        except IOError as e:
            console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}[/bold red]")


class MdExportAdapter(ExportAdapter):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ñ–∞–π–ª Markdown (.md)."""

    def export(
        self,
        result_data: dict[str, Any],
        destination_path: pathlib.Path,
        silent: bool = True,
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .md."""
        try:
            destination_path.write_text(result_data["text"], encoding="utf-8")
            if not silent:
                console.print(_SUCCESS_SAVE_MESSAGE)
                console.print(f"[bold cyan]{destination_path}[/bold cyan]")
        except IOError as e:
            console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}[/bold red]")


class SrtExportAdapter(ExportAdapter):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤ SubRip (.srt)."""

    def export(
        self,
        result_data: dict[str, Any],
        destination_path: pathlib.Path,
        silent: bool = True,
    ) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –≤ SRT –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª."""
        srt_content = []
        segments = result_data.get("segments", [])
        for i, segment in enumerate(segments, start=1):
            start_time = _format_srt_time(segment["start"])
            end_time = _format_srt_time(segment["end"])
            text = segment["text"].strip()
            srt_content.append(f"{i}\n{start_time} --> {end_time}\n{text}\n")

        try:
            destination_path.write_text("\n".join(srt_content), encoding="utf-8")
            if not silent:
                console.print(
                    f"{_SUCCESS_SAVE_MESSAGE}\n"
                    f"[bold cyan]{destination_path}[/bold cyan]"
                )
        except IOError as e:
            console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}[/bold red]")


class DocxExportAdapter(ExportAdapter):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ñ–∞–π–ª Microsoft Word (.docx)."""

    def export(
        self,
        result_data: dict[str, Any],
        destination_path: pathlib.Path,
        silent: bool = True,
    ) -> None:
        """–°–æ–∑–¥–∞–µ—Ç .docx —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç."""
        try:
            import docx

            document = docx.Document()
            document.add_paragraph(result_data["text"])
            document.save(str(destination_path))
            if not silent:
                console.print(_SUCCESS_SAVE_MESSAGE)
                console.print(f"[bold cyan]{destination_path}[/bold cyan]")
        except ImportError as e:
            msg = "–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ .docx —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'python-docx'."
            console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞: {msg}[/bold red]")
            # –í GUI —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∏ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            raise ValueError(msg) from e
        except IOError as e:
            console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}[/bold red]")


# –°–ª–æ–≤–∞—Ä—å-—Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞
_EXPORTERS: Dict[OutputFormat, Type[ExportAdapter]] = {
    OutputFormat.TXT: TxtExportAdapter,
    OutputFormat.MD: MdExportAdapter,
    OutputFormat.SRT: SrtExportAdapter,
    OutputFormat.DOCX: DocxExportAdapter,
}


def get_exporter(output_format: OutputFormat) -> ExportAdapter:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç-–∞–¥–∞–ø—Ç–µ—Ä–∞.

    Args:
        output_format: –¢—Ä–µ–±—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞.

    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞, —Ä–µ–∞–ª–∏–∑—É—é—â–µ–≥–æ ExportAdapter.

    Raises:
        ValueError: –ï—Å–ª–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞.
    """
    exporter_class = _EXPORTERS.get(output_format)
    if not exporter_class:
        raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ '{output_format}'")
    return exporter_class()
