"""
This service contains the core logic for transcribing audio sources.
"""
import numpy as np
import soundfile as sf
import whisper
from rich.console import Console
from rich.progress import (
    BarColumn,
    Progress,
    TextColumn,
    TimeRemainingColumn,
    MofNCompleteColumn,
)

console = Console()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. 30 —Å–µ–∫—É–Ω–¥ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è Whisper.
CHUNK_DURATION_SECONDS = 30


class TranscriptionService:
    """Orchestrates the transcription process using chunking."""

    def __init__(self, model: whisper.Whisper):
        self.model = model

    def transcribe(self, source_path: str, language: str | None, timestamps: bool) -> str:
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –µ–≥–æ –ø–æ —á–∞—Å—Ç—è–º.

        Args:
            source_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É.
            language: –Ø–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
            timestamps: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ –≤—ã–≤–æ–¥.

        Returns:
            –ü–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        """
        try:
            with sf.SoundFile(source_path, "r") as audio_file:
                samplerate = audio_file.samplerate
                total_frames = len(audio_file)
                chunk_size_frames = CHUNK_DURATION_SECONDS * samplerate
                num_chunks = int(np.ceil(total_frames / chunk_size_frames))

                console.print(
                    "üéß [bold blue]–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...[/bold blue] (–§–∞–π–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ —á–∞—Å—Ç—è–º)"
                )

                full_text = []
                # Whisper –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ verbose=True
                # –í whisper-–±–∏–±–ª–∏–æ—Ç–µ–∫–µ –æ–ø—Ü–∏—è –¥–ª—è —Ç–∞–π–º—Å—Ç–µ–º–ø–æ–≤ - —ç—Ç–æ verbose=True
                options = {"language": language, "verbose": timestamps}

                with Progress(
                    TextColumn("[progress.description]{task.description}"),
                    BarColumn(),
                    MofNCompleteColumn(),
                    TimeRemainingColumn(),
                    console=console,
                ) as progress:
                    task = progress.add_task("[cyan]–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è...", total=num_chunks)

                    for i, chunk_data in enumerate(
                        self._read_chunks(audio_file, chunk_size_frames)
                    ):
                        audio_chunk = chunk_data.astype(np.float32)

                        result = self.model.transcribe(audio=audio_chunk, **options)

                        if timestamps:
                            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ç–∞–π–º—Å—Ç–µ–º–ø—ã, —Å–æ–±–∏—Ä–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
                            for segment in result["segments"]:
                                start = int(segment['start'])
                                end = int(segment['end'])
                                # –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–µ–∫—É–Ω–¥
                                start_time = f"{start // 3600:02d}:{(start % 3600) // 60:02d}:{start % 60:02d}"
                                end_time = f"{end // 3600:02d}:{(end % 3600) // 60:02d}:{end % 60:02d}"
                                text = segment['text']
                                full_text.append(f"[{start_time} -> {end_time}] {text.strip()}")
                        else:
                            full_text.append(result["text"])

                        progress.update(task, advance=1)

                return "\n".join(full_text).strip()

        except Exception as e:
            console.print(f"[bold red]‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}[/bold red]")
            return ""

    def _read_chunks(self, audio_file: sf.SoundFile, chunk_size_frames: int):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —á–∏—Ç–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º."""
        while True:
            data = audio_file.read(chunk_size_frames)
            if not len(data):
                break
            yield data