"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (CLI) –¥–ª—è EchoScript.
–û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Typer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–¥–æ–±–Ω–æ–≥–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
"""

import pathlib
import importlib.metadata
from typing_extensions import Annotated

import typer
from rich.console import Console

from app.core.models import ModelSize, OutputFormat

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Typer
app = typer.Typer(
    name="echoscript",
    help="CLI-—É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ YouTube —Å –ø–æ–º–æ—â—å—é Whisper.",
    add_completion=False,
    rich_markup_mode="markdown",
    no_args_is_help=True,
)

console = Console()


def pre_flight_check(source: str) -> bool:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    if source.startswith(("http://", "https://")):
        if "youtube.com" in source or "youtu.be" in source:
            console.print("[green]‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞:[/green] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube.")
            return True
        else:
            console.print("[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π URL. –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube.")
            return False

    file_path = pathlib.Path(source)
    if not file_path.exists():
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ '{file_path}'.")
        return False

    if not file_path.is_file():
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –ü—É—Ç—å '{file_path}' —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –∞ –Ω–µ –Ω–∞ —Ñ–∞–π–ª.")
        return False

    console.print("[green]‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞:[/green] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.")
    return True


@app.command()
def version():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    version = importlib.metadata.version("echoscript")
    console.print(f"EchoScript v[bold green]{version}[/bold green]")


@app.command()
def transcribe(
    source: Annotated[
        str,
        typer.Argument(help="–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ URL YouTube.")
    ],
    model: Annotated[
        ModelSize,
        typer.Option("--model", "-m", help="–ú–æ–¥–µ–ª—å Whisper –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.", case_sensitive=False),
    ] = ModelSize.BASE,
    output_dir: Annotated[
        pathlib.Path,
        typer.Option("--output-dir", "-o", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å."),
    ] = None,
    output_format: Annotated[
        OutputFormat,
        typer.Option("--format", "-f", help="–§–æ—Ä–º–∞—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.", case_sensitive=False),
    ] = OutputFormat.TXT,
    language: Annotated[
        str,
        typer.Option("--lang", "-l", help="–Ø–∑—ã–∫ –∞—É–¥–∏–æ. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω."),
    ] = None,
    timestamps: Annotated[
        bool,
        typer.Option("--timestamps", "-t", help="–í–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª."),
    ] = False,
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
    """
    console.print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –¥–ª—è: [bold cyan]{source}[/bold cyan]")

    if not pre_flight_check(source):
        raise typer.Exit(code=1)

    from app.services.model_manager import get_model
    from app.services.transcription import TranscriptionService
    from app.adapters.youtube import YoutubeAdapter, FFmpegNotFoundError
    from app.adapters.export import get_exporter

    try:
        whisper_model = get_model(model)
    except Exception:
        raise typer.Exit(code=1)

    audio_path = source
    youtube_adapter = None

    try:
        if source.startswith(("http", "https")):
            try:
                youtube_adapter = YoutubeAdapter()
                audio_path = youtube_adapter.download_audio(url=source)
                if not audio_path:
                    console.print("[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å YouTube. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.[/bold red]")
                    raise typer.Exit(code=1)
            except FFmpegNotFoundError as e:
                console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:[/bold red]\n{e}")
                raise typer.Exit(code=1)

        service = TranscriptionService(model=whisper_model)
        transcribed_text = service.transcribe(
            source_path=audio_path, language=language, timestamps=timestamps
        )

        console.print("\n[bold green]‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.[/bold green]")

        if output_dir:
            output_dir.mkdir(parents=True, exist_ok=True)
            base_filename = pathlib.Path(audio_path).stem
            output_filename = f"{base_filename}.{output_format.value}"
            destination_path = output_dir / output_filename

            exporter = get_exporter(output_format)
            exporter.export(text=transcribed_text, destination_path=destination_path)
        else:
            console.print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n[italic]{transcribed_text}[/italic]")

    finally:
        if youtube_adapter:
            youtube_adapter.cleanup()


if __name__ == "__main__":
    app()