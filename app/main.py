"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (CLI) –¥–ª—è EchoScript.
–û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Typer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–¥–æ–±–Ω–æ–≥–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
"""

import importlib.metadata
import pathlib
import threading

import typer
from rich.console import Console
from typing_extensions import Annotated

from app.core.models import ModelSize, OutputFormat, TranscriptionTask

app = typer.Typer(
    name="echoscript",
    help="–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–æ–∫ YouTube —Å –ø–æ–º–æ—â—å—é Whisper.",
    add_completion=False,
    rich_markup_mode="markdown",
    no_args_is_help=True,
)

console = Console()


def pre_flight_check(source: str) -> bool:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
    """
    if source.startswith(("http://", "https://")):
        if "youtube.com" in source or "youtu.be" in source:
            console.print(
                "[green]‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:[/green] "
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube."
            )
            return True
        else:
            console.print(
                "[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π URL. "
                "–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube."
            )
            return False

    file_path = pathlib.Path(source)
    if not file_path.exists():
        console.print(
            f"[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ '{file_path}'."
        )
        return False

    if not file_path.is_file():
        console.print(
            f"[bold red]‚ùå –û—à–∏–±–∫–∞:[/bold red] –ü—É—Ç—å '{file_path}' "
            f"—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."
        )
        return False

    console.print(
        "[green]‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:[/green] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª."
    )
    return True


@app.command()
def version():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    version_str = importlib.metadata.version("echoscript")
    console.print(f"EchoScript v[bold green]{version_str}[/bold green]")


def _run_transcription(
    source: str,
    model_size: ModelSize,
    output_dir: pathlib.Path | None,
    output_format: OutputFormat,
    language: str | None,
    task: TranscriptionTask,
):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏, –≤—ã–Ω–µ—Å–µ–Ω–Ω–∞—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã Typer."""
    from rich.progress import (
        BarColumn,
        DownloadColumn,
        MofNCompleteColumn,
        Progress,
        TextColumn,
        TimeRemainingColumn,
        TransferSpeedColumn,
    )

    from app.adapters.export import get_exporter
    from app.adapters.youtube import FFmpegNotFoundError, YoutubeAdapter
    from app.services.model_manager import get_model
    from app.services.transcription import TranscriptionService

    download_progress = Progress(
        TextColumn("[bold blue]–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...[/]"),
        BarColumn(bar_width=None),
        "[progress.percentage]{task.percentage:>3.1f}%",
        "‚Ä¢",
        DownloadColumn(),
        "‚Ä¢",
        TransferSpeedColumn(),
        "‚Ä¢",
        TimeRemainingColumn(),
        transient=True,
    )

    def download_callback(downloaded, total):
        if not download_progress.tasks:
            download_progress.add_task("download", total=total)
        download_progress.update(download_progress.tasks.id, completed=downloaded)

    try:
        whisper_model = get_model(
            model_size=model_size,
            progress_callback=download_callback,
            log_callback=console.print,
        )
    except Exception as e:
        console.print(
            f"[bold red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}[/bold red]"
        )
        raise typer.Exit(code=1) from e

    audio_path = source
    youtube_adapter = None

    try:
        if source.startswith(("http", "https")):
            try:
                youtube_adapter = YoutubeAdapter()
                audio_path = youtube_adapter.download_audio(url=source)
                if not audio_path:
                    console.print(
                        "[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å YouTube.[/bold red]"
                    )
                    raise typer.Exit(code=1)
            except FFmpegNotFoundError as e:
                console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:[/bold red]\n{e}")
                raise typer.Exit(code=1) from e

        service = TranscriptionService(model=whisper_model)
        transcription_progress = Progress(
            TextColumn("[cyan]–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è...[/]"),
            BarColumn(),
            MofNCompleteColumn(),
            TimeRemainingColumn(),
            transient=True,
        )

        def transcription_callback(processed, total):
            if not transcription_progress.tasks:
                transcription_progress.add_task("transcribe", total=total)
            transcription_progress.update(
                transcription_progress.tasks.id, completed=processed
            )

        with transcription_progress:
            cancel_event = threading.Event()
            result_data = service.transcribe(
                source_path=audio_path,
                language=language,
                task=task,
                cancel_event=cancel_event,
                progress_callback=transcription_callback,
            )

        console.print("\n[bold green]‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.[/bold green]")

        if output_dir:
            output_dir.mkdir(parents=True, exist_ok=True)
            base_filename = pathlib.Path(audio_path).stem
            output_filename = f"{base_filename}.{output_format.value}"
            destination_path = output_dir / output_filename
            exporter = get_exporter(output_format)
            exporter.export(
                result_data=result_data, destination_path=destination_path, silent=False
            )
        else:
            console.print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n[italic]{result_data['text']}[/italic]")

    finally:
        if youtube_adapter:
            youtube_adapter.cleanup()


@app.command()
def transcribe(
    source: Annotated[
        str, typer.Argument(help="–ò—Å—Ç–æ—á–Ω–∏–∫: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ URL YouTube.")
    ],
    model: Annotated[
        ModelSize,
        typer.Option(
            "--model",
            "-m",
            help="–ú–æ–¥–µ–ª—å Whisper –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
            case_sensitive=False,
        ),
    ] = ModelSize.BASE,
    output_dir: Annotated[
        pathlib.Path,
        typer.Option(
            "--output-dir", "-o", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
        ),
    ] = None,
    output_format: Annotated[
        OutputFormat,
        typer.Option(
            "--format", "-f", help="–§–æ—Ä–º–∞—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.", case_sensitive=False
        ),
    ] = OutputFormat.TXT,
    language: Annotated[
        str,
        typer.Option("--lang", "-l", help="–Ø–∑—ã–∫ –∞—É–¥–∏–æ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)."),
    ] = None,
    task: Annotated[
        TranscriptionTask,
        typer.Option(
            "--task", help="–ó–∞–¥–∞—á–∞: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥.", case_sensitive=False
        ),
    ] = TranscriptionTask.TRANSCRIBE,
):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    console.print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –¥–ª—è: [bold cyan]{source}[/bold cyan]")

    if not pre_flight_check(source):
        raise typer.Exit(code=1)

    _run_transcription(
        source=source,
        model_size=model,
        output_dir=output_dir,
        output_format=output_format,
        language=language,
        task=task,
    )


if __name__ == "__main__":
    app()
